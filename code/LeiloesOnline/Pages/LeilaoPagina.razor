@using LeiloesOnline.Business;
@using LeiloesOnline.Business.Objects;
@inject NavigationManager NavigationManager

@page "/leilaopagina"

<PageTitle>Leilão</PageTitle>
<header>
    <nav class="navbar navbar-light bg-light">
        <a href="/HomepageLogged">
            <img class="foto-header" src="images/favicon.png" alt="favicon.png" />
        </a>
        <h3 class="titulo"><b>Leiloaria Bracarense Lda.</b></h3>

        <p><b>Carteira: </b> @carteira €</p>

        <a style="margin-right: 25px;" class="btn btn-primary" href="/conta">Olá @username</a>
    </nav>

    <hr>
</header>


<body>
    <p><b> Nome do leilão: </b> @leilao.nome </p>


    <p></p>

    <table align="center">


        <tr>
            <td style="width: 700px; height: 500px; padding: 10px; border: 5px solid gray; margin: 10px;">
                <div>
                    <p><center><b>Informações</b></center></p>
                    <p>Leiloeiro: @email </p>
                    <p>Categoria: @leilao.categoria </p>
                    <p>Preço Base: @leilao.preco_base </p>
                    <p>Diferença Minima: @leilao.valor_minimo_licitacao </p>
                    <p>Data Início: @leilao.data_inicio.ToString() </p>
                    <p>Data Fim: @leilao.data_fim.ToString() </p>

                    <p><center><b>Artigos no lote:</b></center></p>
                    @foreach (var item in @leilao.lote_artigos.artigos)
                    {
                        <p> NOME: @item.getNome() | TIPO: @item.GetType().Name | DESCRIÇÃO: @item.getDescricao()</p>

                    }
                    <p></p>

                </div>
                
            </td>
            <td style="width: 500px; height: 500px; padding: 10px; border: 5px solid gray; margin: 10px;">
                <div>
                    <img align="middle" class="imagem" src="images/quadro.png" alt="quadro.png"
                         width="500"
                         height="500" />
                </div>
            </td>
            <td style="width: 700px; height: 500px; padding: 10px; border: 5px solid gray; margin: 10px;">

                <div>
                    <p><center><b>Histórico de licitações:</b></center></p>
                    @foreach (var item in licitacoes)
                    {
                        <p> UTILIZADOR: @item.email_participante | VALOR: @item.valor</p>

                    }
                    <p></p>
                </div>
            </td>
        </tr>
    </table>

    <div style="display: flex; justify-content: space-between; align-items: baseline; margin-top: 10px;">
        <a @onclick=@setCurrentLeilaoToNull class="btn btn-primary" style="margin-right: 1px;" href="/todos">Sair</a>

        <div style="margin-left: 1px;">
            <p>
                <input type="number" id="fname" name="fname" @bind="valor_licitacao">
                <a @onclick=@fazLicitacao class="btn btn-primary">Licitar</a>
            </p>
        </div>
    </div>

    <Popup @ref="popup" />

</body>

@code {

    private static I_LeiloesOnlineFacade if_leiloes = new LeiloesOnlineFacade();

    private Leilao leilao = CurrentLeilao.getCurrentLeilao();
    private string email = CurrentLeilao.getCurrentLeilao().email_quem_propos;

    private string username = CurrentUser.getCurrentUser().username;
    private float carteira = CurrentUser.getCurrentUser().carteira;

    private float valor_licitacao = 0;
    private List<Licitacao> licitacoes = if_leiloes.getLicitacoes(CurrentLeilao.getCurrentLeilao().id_leilao, "");

    private Popup popup = new Popup();

    //-----------------------------------------------------------------------------------------------------
    // Este pedaço de codigo verifica se há leilões que já tenham terminado e anuncia o vencedor caso
    // haja algum. Tem de ser implementado em todas as paginas porque não se conseguiu por um event handler
    // a funcionar.

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            VerificaEstadoLeiloes check = new VerificaEstadoLeiloes();
            string aviso = check.verifica();
            if (!aviso.Equals(""))
            {
                Console.WriteLine(aviso);
                lança_aviso(aviso);
                await Task.Delay(5000);
                NavigationManager.NavigateTo("/leilaopagina", forceLoad: true);
            }
        }
    }

    public async Task lança_aviso(string aviso)
    {
        await InvokeAsync(() => popup.Show(aviso, "AVISO", "70%", "70%"));
    }

    //-----------------------------------------------------------------------------------------------------


    void fazLicitacao()
    {
        DateTime dataAtual = DateTime.Now;
        DateTime dataInferior = leilao.data_inicio;
        DateTime dataSuperior = leilao.data_fim;

        // verifica se a data atual está dentro do limite de datas do leilão
        if(leilao.email_quem_propos.Equals(CurrentUser.getCurrentUser().email_participante))
        {
            Console.WriteLine("Não pode licitar no seu próprio leilão");
            popup.Show("Não pode licitar no seu próprio leilão!", "AVISO", "70%", "70%");
        }
        else
        {
            if (dataAtual >= dataInferior && dataAtual <= dataSuperior)
            {
                Console.WriteLine("A data atual está dentro do intervalo.");


                // verifica se tem dinheiro suficiente para licitar
                if (valor_licitacao > carteira)
                {
                    Console.WriteLine("Valor de licitação ultrapassa o seu saldo atual!");
                    popup.Show("Valor de licitação ultrapassa o seu saldo atual!", "AVISO", "70%", "70%");
                }
                else
                {
                    if (CurrentUser.getDivida() > carteira)
                    {
                        Console.WriteLine("Se fizer essa licitação vai acumular uma divida maior que o seu saldo atual");
                        popup.Show("Se fizer essa licitação vai acumular uma divida maior que o seu saldo atual", "AVISO", "70%", "70%");
                    }
                    else
                    {
                        // verifica se a licitação pelo menos igual ao preço base
                        if (valor_licitacao < leilao.preco_base)
                        {
                            Console.WriteLine("Valor de licitação abaixo do preço base");
                            popup.Show("Valor de licitação abaixo do preço base", "AVISO", "70%", "70%");
                        }
                        else
                        {
                            // verifica se a licitação respeita a regra da diferença minima
                            if (valor_licitacao >= leilao.licitacao_atual + leilao.valor_minimo_licitacao)
                            {

                                Licitacao l = new Licitacao(DateTime.Now, valor_licitacao, CurrentUser.getCurrentUser().email_participante, leilao.id_leilao);

                                Console.WriteLine(l.imprimeLicitacao());

                                if (if_leiloes.addLicitacao(l) == true)
                                {
                                    Console.WriteLine("Licitação concluida");
                                    popup.Show("Licitação concluida", "AVISO", "70%", "70%");
                                    NavigationManager.NavigateTo("/leilaopagina", forceLoad: true);
                                }
                                else
                                {
                                    Console.WriteLine("Licitação falhou");
                                    popup.Show("Licitação falhou", "AVISO", "70%", "70%");
                                }
                            }
                            else
                            {
                                Console.WriteLine("Valor de licitação demasiado baixo");
                                popup.Show("Valor de licitação demasiado baixo", "AVISO", "70%", "70%");
                            }
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine("A data atual está fora do intervalo.");
                popup.Show("A data atual está fora do intervalo.\n Este leilão ainda não começou!", "AVISO", "70%", "70%");
            }
        }
        
    }

    void setCurrentLeilaoToNull()
    {
        Leilao vazio = new Leilao();
        CurrentLeilao.setCurrentLeilao(vazio);
    }
}

