@using System;
@using System.Globalization;
@using LeiloesOnline.Business;
@using LeiloesOnline.Business.Objects;
@inject NavigationManager NavigationManager

@page "/proposta"

<PageTitle>Proposta de Leilão</PageTitle>

<center><h1>Proposta de Leilão</h1></center>


<p>
    <b>Categoria: </b>
    <button @onclick=mudaCategoriaMisto type="button" class="btn btn-secondary">Misto</button>
    <button @onclick=mudaCategoriaLivros type="button" class="btn btn-secondary">Livros</button>
    <button @onclick=mudaCategoriaQuadros type="button" class="btn btn-secondary">Quadros</button>
    <button @onclick=mudaCategoriaJoias type="button" class="btn btn-secondary">Joias</button>
</p>

<p>
    <form action="/action_page.php">
        <label for="fname"><b>Nome do Leilão:</b></label>
        <input type="text" id="fname" name="fname" @bind="nome_leilao">
    </form>
</p>


<style>
    table, th, td {
        border: 1px solid black;
    }
</style>

<table style="width:40%">
    <tr>
        <th>Lista de artigos:</th>
    </tr>
    @foreach (var item in artigosCurrent)
    {
        <tr>
            <td>ID: @item.Value.getIdArtigo() | TIPO: @item.Value.GetType().Name | NOME: @item.Value.getNome() | DESCRIÇÃO: @item.Value.getDescricao() </td>
        </tr>
    }
</table>

<p>
    <label for="fname"> Indicar ID do artigo: </label>
    <input type="text" id="fname" name="fname" @bind="id_artigo_escolhido">
    <a @onclick=@adicionaArtigoAoLote class="btn btn-primary btn-sm">Adicionar artigo ao lote</a>
    <a @onclick=@removeArtigoDoLote class="btn btn-primary btn-sm">Remover artigo do lote</a>
</p>

<p>       </p>


<p>
    <form action="/action_page.php">
        <label for="fname"><b>Preço Base:</b></label>
        <input type="text" id="fname" name="fname" @bind="preco_base">
    </form> 
</p>

<p>
    <form action="/action_page.php">
        <label for="fname"><b>Valor de diferença:</b></label>
        <input type="text" id="fname" name="fname" @bind="valor_diferenca">
    </form> 
</p>

<p>
    <b>Duração:</b> 
    <label for="fname">Data de Início (YYYY-MM-DD HH:MI:SS): </label>
    <input type="text" id="fname" name="fname" @bind="data_inicio">
    <label for="fname">Data de Término (YYYY-MM-DD HH:MI:SS):</label>
    <input type="text" id="fname" name="fname" @bind="data_fim">
</p>

<center> <a class="botao-esq btn btn-primary" href="/HomepageLogged">Voltar</a> </center>
<center><button @onclick=@proporLeilao>Propor</button></center>


<script>
    function selecionarJoias() {
        // Obtenha o elemento select
        var selectElement = document.getElementById("filtro");

        // Defina a opção "Joias" como selecionada
        for (var i = 0; i < selectElement.options.length; i++) {
            if (selectElement.options[i].value === "Joias") {
                selectElement.options[i].selected = true;
            }
        }
    }
</script>

<Popup @ref="popup" />


@code {

    private string categoria = "";
    private string nome_leilao = "";
    private float preco_base = 0;
    private float valor_diferenca = 0;
    private string data_inicio = "";
    private string data_fim = "";

    private Popup popup = new Popup();

    private Dictionary<int, Artigo> artigosParaLeiloar = new Dictionary<int, Artigo>();

    private Dictionary<int, Artigo> artigosCurrent = CurrentUser.getCurrentUser().meusArtigos;
    int id_artigo_escolhido = 0;


    //-----------------------------------------------------------------------------------------------------
    // Este pedaço de codigo verifica se há leilões que já tenham terminado e anuncia o vencedor caso
    // haja algum. Tem de ser implementado em todas as paginas porque não se conseguiu por um event handler
    // a funcionar.

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            VerificaEstadoLeiloes check = new VerificaEstadoLeiloes();
            string aviso = check.verifica();
            if (!aviso.Equals(""))
            {
                Console.WriteLine(aviso);
                lança_aviso(aviso);
                await Task.Delay(5000);
                NavigationManager.NavigateTo("/proposta", forceLoad: true);
            }
        }
    }

    public async Task lança_aviso(string aviso)
    {
        await InvokeAsync(() => popup.Show(aviso, "AVISO", "70%", "70%"));
    }

    //-----------------------------------------------------------------------------------------------------



    void mudaCategoriaMisto()
    {
        categoria = "Misto";
        popup.Show("Categoria alterada para 'Misto'", "AVISO", "70%", "70%");
    }
    void mudaCategoriaLivros()
    {
        categoria = "Livros";
        popup.Show("Categoria alterada para 'Livros'", "AVISO", "70%", "70%");
    }
    void mudaCategoriaQuadros()
    {
        categoria = "Quadros";
        popup.Show("Categoria alterada para 'Quadros'", "AVISO", "70%", "70%");
    }
    void mudaCategoriaJoias()
    {
        categoria = "Joias";
        popup.Show("Categoria alterada para 'Joias'", "AVISO", "70%", "70%");
    }



    void adicionaArtigoAoLote()
    {

        // se o artigo ainda não existir no dicionario 
        if (!artigosParaLeiloar.ContainsKey(id_artigo_escolhido))
        {
            I_LeiloesOnlineFacade if_leiloes = new LeiloesOnlineFacade();
            Artigo a = if_leiloes.getArtigo(id_artigo_escolhido);

            string compara = a.GetType().Name + "s";

            if (categoria.Equals("Misto"))
            {
                artigosParaLeiloar.Add(id_artigo_escolhido, a);

                Console.WriteLine("Adicionado artigo ao lote");
                popup.Show("Adicionado artigo ao lote", "AVISO", "70%", "70%");

                Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
            }
            else
            {
                if (compara.Equals(categoria))
                {
                    artigosParaLeiloar.Add(id_artigo_escolhido, a);

                    Console.WriteLine("Adicionado artigo ao lote");
                    popup.Show("Adicionado artigo ao lote", "AVISO", "70%", "70%");

                    Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
                }
                else
                {
                    Console.WriteLine("O artigo escolhido não corresponde à categoria de leilão estipulada");
                    popup.Show("O artigo escolhido não corresponde à categoria de leilão estipulada", "AVISO", "70%", "70%");
                    Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
                }
            }
        }
        else
        {
            Console.WriteLine("Erro ao adicionar artigo ao lote");
            popup.Show("Erro ao adicionar artigo ao lote", "AVISO", "70%", "70%");
            Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
        }
    }

    void removeArtigoDoLote()
    {
        // se o artigo existe no dicionario pode ser removido
        if (artigosParaLeiloar.ContainsKey(id_artigo_escolhido))
        {
            artigosParaLeiloar.Remove(id_artigo_escolhido);
            Console.WriteLine("Artigo removido do lote");
            popup.Show("Artigo removido do lote", "AVISO", "70%", "70%");
            Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
        }
        else
        {
            Console.WriteLine("Erro ao remover artigo para leiloar");
            popup.Show("Erro ao adicionar artigo para leiloar", "AVISO", "70%", "70%");
            Console.WriteLine(listaArtigosParaLeiloar(artigosParaLeiloar));
        }
    }


    bool verificaArtigosPorCategoria(string categoria, Dictionary<int, Artigo> artigosParaVerificar)
    {
        bool res = true;

        if (categoria.Equals("Misto"))
        {
            return true;
        }
        else
        {
            foreach (Artigo a in artigosParaVerificar.Values)
            {
                string compara = a.GetType().Name + "s";
                if (!compara.Equals(categoria))
                {
                    res = false;
                    break;
                }
            }
        }
        return res;
    }


    void proporLeilao()
    {
        if (categoria.Equals("") && nome_leilao.Equals("") && data_inicio.Equals("") && data_fim.Equals("") && artigosParaLeiloar.Count() == 0)
        {
            popup.Show("O formulário não foi completamente preenchido", "AVISO", "70%", "70%");
            return;
        }
        else
        {
            if (verificaArtigosPorCategoria(categoria, artigosParaLeiloar) == true)
            {
                I_LeiloesOnlineFacade if_leiloes = new LeiloesOnlineFacade();
                List<Licitacao> licitacoes = new List<Licitacao>();
                LoteArtigos loteartigos = new LoteArtigos();

                DateTime data_i = new DateTime();
                DateTime data_f = new DateTime();

                // se o formato inserido de data for válido prosegue com a proposta
                DateTime dateValue;
                CultureInfo pt = new CultureInfo("pt-PT");

                if (DateTime.TryParseExact(data_inicio, "yyyy-MM-dd HH:mm:ss", pt, DateTimeStyles.None, out dateValue) == true &&
                    DateTime.TryParseExact(data_fim, "yyyy-MM-dd HH:mm:ss", pt, DateTimeStyles.None, out dateValue) == true)
                {
                    //converter datas de string para Datetime
                    data_i = DateTime.Parse(data_inicio);
                    data_f = DateTime.Parse(data_fim);
                }
                else
                {
                    Console.WriteLine("O formato inserido numa das datas não é válido!");
                    popup.Show("O formato inserido numa das datas não é válido!", "AVISO", "70%", "70%");
                    return;
                }

                // adicionar o lote de artigos
                foreach (Artigo a in artigosParaLeiloar.Values)
                {
                    loteartigos.adicionaArtigoAoLote(a);
                    Console.WriteLine("Adicionado " + a.getNome() + " ao lote de artigos");
                }

                // o valor de aprovado deverá ser false pra depois ser mudado para true pelo administrador
                if (if_leiloes.proporLeilao(categoria, nome_leilao, data_i, data_f, preco_base, valor_diferenca, 0, false, CurrentUser.getCurrentUser().email_participante, licitacoes, loteartigos))
                {
                    Console.WriteLine("Leilão proposto com sucesso");
                    popup.Show("Leilão proposto com sucesso", "AVISO", "70%", "70%");
                }
                else
                {
                    Console.WriteLine("Erro a propor leilão");
                    popup.Show("Erro a propor leilão", "AVISO", "70%", "70%");
                }
            }
            else
            {
                Console.WriteLine("Os artigos escolhidos não correspondem à categoria escolhida");
                popup.Show("Os artigos escolhidos não correspondem à categoria escolhida", "AVISO", "70%", "70%");
            }
        }
    }

    public string listaArtigosParaLeiloar(Dictionary<int, Artigo> artigosParaLeiloar_copy)
    {
        string res = "";
        foreach (var item in artigosParaLeiloar_copy)
        {
            res += "ID:" + item.Value.getIdArtigo() + "| TIPO:" + item.Value.GetType().Name + "| NOME:" + item.Value.getNome() + "| DESCRIÇÃO:" + item.Value.getDescricao();
        }
        return res;
    }

}